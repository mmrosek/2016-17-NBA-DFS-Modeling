import pandas as pd
import numpy as np
import datetime
import time

### Can't be run straight through b/c of statements that delete removable variables

# Read in all_seasons data set
all_seasons=pd.read_csv("/Users/Miller/Documents/NBA 2016-17/NBA Player Gamelog Data/all_seasons.csv")

###################################################################################

##### Changing names of duplicate players in all_seasons

### Duplicate players:
# Marcus Williams
# Dee Brown
# Tim Hardaway Sr.
# Chris Johnson
# Tony Mitchell
# Glen Rice Jr.
# Glenn Robinson Jr.
# Chris Wright

# Using to double check duplicate status
# test = all_seasons.ix[all_seasons.Player=='Chris Wright',['Player','Tm','Date']]
# test.Tm.unique()

# Marcus Williams

marcus_williams_mask = (all_seasons.Player == "Marcus Williams") & ((all_seasons.Tm == "SAS") | (all_seasons.Tm == "LAC" ))

all_seasons.ix[marcus_williams_mask,"Player"] = "Marcus Elliott Williams"

# Dee Brown

dee_brown_mask = (all_seasons.Player == "Dee Brown") & ((all_seasons.Tm == "UTA") | (all_seasons.Tm == "WAS") | (all_seasons.Tm == "PHO"))

all_seasons.ix[dee_brown_mask,"Player"] = "Dee Daniel Brown"

# Tim Hardaway Sr.

hardaway_mask = (all_seasons.Player == "Tim Hardaway") & ((all_seasons.Tm == "MIA") | (all_seasons.Tm == "GSW") | (all_seasons.Tm == "DAL") | (all_seasons.Tm == "DEN") | (all_seasons.Tm == "IND"))

all_seasons.ix[hardaway_mask,"Player"] = "Tim Hardaway Sr."

# Chris Johnson

# Two masks b/c other CJ also played for Boston

cj_mask_1 = (all_seasons.Player == "Chris Johnson") & ((all_seasons.Tm == "BOS") & (all_seasons.season == 2010))

all_seasons.ix[cj_mask_1,"Player"] = "Chris LSU Johnson"

cj_mask_2 = (all_seasons.Player == "Chris Johnson") & ((all_seasons.Tm == 'POR') | (all_seasons.Tm == "NOH") | (all_seasons.Tm == "MIN"))

all_seasons.ix[cj_mask_2,"Player"] = "Chris LSU Johnson"

# Tony Mitchell

mitchell_mask = (all_seasons.Player == "Tony Mitchell") & (all_seasons.Tm == "DET")

all_seasons.ix[mitchell_mask,"Player"] = "Tony Anthony Mitchell"

# Glen Rice Jr.

rice_mask = (all_seasons.Player == "Glen Rice") & (all_seasons.Tm == "WAS")

all_seasons.ix[rice_mask,"Player"] = "Glen Rice Jr."

# Glenn Robinson Jr.

# Two masks b/c both G-Robs played for PHI

robinson_mask_1 = (all_seasons.Player == "Glenn Robinson") & ((all_seasons.Tm == "PHI") & (all_seasons.season == 2003))

all_seasons.ix[robinson_mask_1,"Player"] = "Glenn Robinson Jr."

robinson_mask_2 = (all_seasons.Player == "Glenn Robinson") & ((all_seasons.Tm == "MIL") | (all_seasons.Tm =="ATL") | (all_seasons.Tm == "SAS"))

all_seasons.ix[robinson_mask_2,"Player"] = "Glenn Robinson Jr."

# Chris Wright

wright_mask = (all_seasons.Player == "Chris Wright") & ((all_seasons.Tm == 'DAL'))

all_seasons.ix[wright_mask,"Player"] = "Chris Georgetown Wright"

###########################################################################################
###########################################################################################

### Reads in dataset of all players to play in NBA history with relevant duplicates fixed
#players_full = pd.read_csv("/Users/Miller/Desktop/nodups.csv")

players_full = pd.read_csv("/Users/Miller/Documents/NBA 2016-17/every_player_in_nba_history_no_duplicates_for_1998_plus.csv")

# Creates list of players who started career prior to beginning of all_season data set (1998-1999 season)

too_old_mask = (players_full.From < 1999) 

old_players_list = players_full.ix[too_old_mask,"Player"].unique()

# Removes players in "old_players_list" (players that started their career before 1998-1999 season)

all_seasons = all_seasons[~all_seasons.Player.isin(old_players_list)]  

del players_full

############################################################################################

stats = ['PTS','2P','2P%','2PA', '3P', '3P%', '3PA', 'AST','BLK', 'DRB','FG', 'FG%', 'FGA', 'FT', 'FT%', 'FTA', 'GmSc','MP','ORB','PF','STL','TOV',"TRB"]

# Creates dataframe with each row corresponding to a season for each player/season combo
df=pd.pivot_table(all_seasons, index=["season","Player"], columns=["Game_Number"], values=stats)

# Creates new df with correct columns
df = df.reset_index()

# Removes excess variables to free up memory
del all_seasons
del too_old_mask
del cj_mask_1
del cj_mask_2
del dee_brown_mask
del hardaway_mask
del marcus_williams_mask
del mitchell_mask
del rice_mask
del robinson_mask_1
del robinson_mask_2
del wright_mask
del old_players_list

####################################################################################
####################################################################################
####################################################################################

##### This section calculates avg, wtd. avg, median and totals for every stat for every szn

# Creates dictionary with keys as years and values as number of games in the season

pts_cols = [column for column in df.columns if 'PTS' in str(column)]

list_of_game_nums = [len(pts_cols) - sum(df.ix[df.season==year,pts_cols].isnull().sum(axis=0) == len(df.ix[df.season==year,pts_cols])) for year in range(1998,2016)]

years = list(range(1998,2016))

num_games_in_season_dict = {year:num_games for (year,num_games) in zip(years,list_of_game_nums)}

####################################################################################

weights = [0.2,0.3,0.4,0.5]

stats = ['PTS','2P','2P%','2PA', '3P', '3P%', '3PA', 'AST','BLK', 'DRB','FG', 'FG%', 'FGA', 'FT', 'FT%', 'FTA', 'GmSc','MP','ORB','PF','STL','TOV',"TRB"]

years = range(1998,2016)

start = time.time()
######################
for weight in weights:

    for year in years:
        
        print(year)
    
        # Calculates the number of games in a season
        num_of_games_in_season = num_games_in_season_dict[year]
        
        # Creates increment value for weight vector
        increment = weight / (num_of_games_in_season-1)
                
        # Creates weight vector
        weight_vector = np.array([(1-weight/2+(increment*game)) for game in range(num_of_games_in_season)])
        
        # Using first stat [PTS usually] columns to determine which games each player played in, could be any stat in theory
        start_of_first_stat = np.argmax(df.columns.get_level_values(0).str.contains(stats[0],regex=False) > 0)
        
        # Calculates last column ("end_of_year") containing data for stat/year combo in question
        end_of_first_stat = start_of_first_stat + num_of_games_in_season
        
        # Vectorized calculation for weight_resdistribution (missing_weight / present_weight)
        weight_resdistribution=np.array(np.where(df.ix[df.season == year,start_of_first_stat:end_of_first_stat].isnull().sum(axis=1) == num_of_games_in_season , 0, np.sum((pd.isnull(df.ix[df.season == year,start_of_first_stat:end_of_first_stat]) * weight_vector),axis=1)/np.sum((~pd.isnull(df.ix[df.season == year,start_of_first_stat:end_of_first_stat]) * weight_vector),axis=1)))
        
        for stat in stats:
            
            #print(stat)
              
            start_of_stat = np.argmax(df.columns.get_level_values(0).str.contains(stat,regex=False) > 0)
        
            # Calculates last column ("end_of_stat") containing data for stat/year combo in question
            end_of_stat = start_of_stat + num_of_games_in_season
            
            # Creates list of columns that contain the string "PTS"
            stat_cols = [column for column in df.columns if stat in str(column)]
            
            if weight == weights[0]:
                
                # Calculates avg and median stats for the entire season including playoffs
                df.ix[df.season == year, 'full_szn_avg_{}'.format(stat.lower())] = np.array(df.ix[df.season == year,start_of_stat:end_of_stat].mean(axis=1))
                df.ix[df.season == year,'full_szn_median_{}'.format(stat.lower())] = np.array(df.ix[df.season == year,start_of_stat:end_of_stat].median(axis=1))
            
                # Removes playoff data from total calculation
                if year == 2011:
                            
                    ### Creating new column in the form "total_stat.lower()_year" 
                    df.ix[df.season == year, 'reg_szn_total_{0}'.format(stat.lower())] = np.array(df.ix[df.season == year,start_of_stat:start_of_stat+66].sum(axis=1))
                      
                elif year == 1998:
                            
                    ### Creating new column in the form "total_stat.lower()_year" 
                    df.ix[df.season == year, 'reg_szn_total_{0}'.format(stat.lower())] = np.array(df.ix[df.season == year,start_of_stat:start_of_stat+50].sum(axis=1))
                        
                else:
                            
                    ### Creating new column in the form "total_stat.lower()_year" 
                    df.ix[df.season == year, 'reg_szn_total_{0}'.format(stat.lower())] = np.array(df.ix[df.season == year,start_of_stat:start_of_stat+82].sum(axis=1))
                        
            ### Converts NaN values to 0 then multiplies the row values by the newly calculated weight vector 
            df.ix[df.season==year,'wtd_avg_{0}_{1}'.format(weight,stat.lower())] = np.array(np.sum((((~(df.ix[df.season == year,start_of_stat:end_of_stat].isnull()) * weight_vector)).multiply(weight_resdistribution,axis='index') + (~(df.ix[df.season == year,start_of_stat:end_of_stat].isnull()) * weight_vector)) * df.ix[df.season == year,start_of_stat:end_of_stat],axis=1)/num_of_games_in_season)

end = time.time()
print(end - start)

############################################################################################
############################################################################################

# Change dataset name to recycle code
years_as_rows = df.copy()

del df

##### Section below calculates FD and DK point values for each season

# creates new columns
years_as_rows['double_doubles'] = 0
years_as_rows['triple_doubles'] = 0


### Doesn't account for lockout-shortened regular seasons
# Creates triple_double and double_double columns for regular season games
for game_num in range(1,83):
    years_as_rows['double_doubles'] = np.array(years_as_rows['double_doubles']) + np.where(np.sum(years_as_rows.ix[:,[("PTS",game_num),("TRB",game_num),('AST',game_num),("STL",game_num),('BLK',game_num)]] >= 10, axis=1) == 2, 1, 0)
    years_as_rows['triple_doubles'] = np.array(years_as_rows['triple_doubles']) + np.where(np.sum(years_as_rows.ix[:,[("PTS",game_num),("TRB",game_num),('AST',game_num),("STL",game_num),('BLK',game_num)]] >= 10, axis=1) >= 3, 1, 0)

# creates new columns
years_as_rows['full_szn_double_doubles'] = 0
years_as_rows['full_szn_triple_doubles'] = 0

# Creates triple_double and double_double columns for full season games
for game_num in range(1,109):
    years_as_rows['full_szn_double_doubles'] = np.array(years_as_rows['full_szn_double_doubles']) + np.where(np.sum(years_as_rows.ix[:,[("PTS",game_num),("TRB",game_num),('AST',game_num),("STL",game_num),('BLK',game_num)]] >= 10, axis=1) == 2, 1, 0)
    years_as_rows['full_szn_triple_doubles'] = np.array(years_as_rows['full_szn_triple_doubles']) + np.where(np.sum(years_as_rows.ix[:,[("PTS",game_num),("TRB",game_num),('AST',game_num),("STL",game_num),('BLK',game_num)]] >= 10, axis=1) >= 3, 1, 0)


# Creates vectors to create total fantasy points columns
total_pts_vector = np.array(years_as_rows['reg_szn_total_pts'])
total_reb_vector = np.array(years_as_rows['reg_szn_total_trb'])
total_stl_vector = np.array(years_as_rows['reg_szn_total_stl'])
total_blk_vector = np.array(years_as_rows['reg_szn_total_blk'])
total_tov_vector = np.array(years_as_rows['reg_szn_total_tov'])
total_ast_vector = np.array(years_as_rows['reg_szn_total_ast'])
total_3p_vector = np.array(years_as_rows['reg_szn_total_3p'])
double_double_vector = np.array(years_as_rows['double_doubles'])
triple_double_vector = np.array(years_as_rows['triple_doubles'])

# Calculatest regular season total FanDuel points
years_as_rows['reg_szn_total_FD_pts'] = total_pts_vector + total_reb_vector * 1.2 + total_ast_vector * 1.5 + total_stl_vector * 2 + total_blk_vector * 2 - total_tov_vector

# Calculates full season average (per game) FanDuel points
years_as_rows['full_szn_avg_FD_pts'] = years_as_rows['full_szn_avg_pts'] + years_as_rows['full_szn_avg_ast'] * 1.5 + years_as_rows['full_szn_avg_blk'] * 2 + years_as_rows['full_szn_avg_stl'] * 2 + years_as_rows['full_szn_avg_trb'] * 1.2 - years_as_rows['full_szn_avg_tov']

# Calculated regular season total b/c didn't want to penalize players on bad teams and calculated full season average to still incorporate playoff data

######################################################################################

### Calculates number of games played in a season

# Returns list of column names for multi-indexed DF
column_names = list(years_as_rows.columns.get_values())

# Calculates list of column numbers for 'MP'
minutes_played_col_nums = [col_num for col_num in range(len(column_names)) if 'MP' in column_names[col_num]]

# Maximum possible number of games played (108)
max_num_of_games = len(minutes_played_col_nums)

# Calculating nubmer of games played for each player
years_as_rows['full_szn_games_played'] = max_num_of_games - years_as_rows.ix[:,minutes_played_col_nums].isnull().sum(axis=1)

del column_names
del minutes_played_col_nums
del max_num_of_games

###################################################################################

# Calculatest regular season total DraftKings points 
years_as_rows['reg_szn_total_DK_pts'] = total_pts_vector + total_reb_vector * 1.25 + total_ast_vector * 1.5 + total_stl_vector * 2 + total_blk_vector * 2 - total_tov_vector * 0.5 + total_3p_vector * 0.5 + double_double_vector * 1.5 + triple_double_vector * 3

# Calculates full season average DK points
years_as_rows['full_szn_avg_DK_pts'] = np.where(years_as_rows['full_szn_games_played'] > 0 , years_as_rows['full_szn_avg_pts'] + years_as_rows['full_szn_avg_ast'] * 1.5 + years_as_rows['full_szn_avg_blk'] * 2 + years_as_rows['full_szn_avg_stl'] * 2 + years_as_rows['full_szn_avg_trb'] * 1.25 - years_as_rows['full_szn_avg_tov'] * 0.5 + (years_as_rows['full_szn_double_doubles']/years_as_rows['full_szn_games_played'] * 1.5) + (years_as_rows['full_szn_triple_doubles']/years_as_rows['full_szn_games_played'] * 3) + years_as_rows['full_szn_avg_3p']*0.5,0)

# Calculates volume * efficiency prior
years_as_rows['FD_prior'] = years_as_rows['full_szn_avg_FD_pts'] * years_as_rows['reg_szn_total_FD_pts']
years_as_rows['DK_prior'] = years_as_rows['full_szn_avg_DK_pts'] * years_as_rows['reg_szn_total_DK_pts']

# Calculates volume * efficiency prior
years_as_rows['FD_prior_^0.7_of_total'] = years_as_rows['full_szn_avg_FD_pts'] * (years_as_rows['reg_szn_total_FD_pts']**0.7)
years_as_rows['DK_prior_^0.7_of_total'] = years_as_rows['full_szn_avg_DK_pts'] * (years_as_rows['reg_szn_total_DK_pts']**0.7)

# Free up memory
del total_pts_vector 
del total_reb_vector
del total_stl_vector 
del total_blk_vector 
del total_tov_vector 
del total_ast_vector 
del total_3p_vector 
del double_double_vector 
del triple_double_vector 

############################################################################################
############################################################################################

### Removes game log data

# Returns list of column names for multi-indexed DF
column_names = list(years_as_rows.columns.get_values())

# Calculates list of column numbers for last stat containing gamelog data [usually "TRB"]
end_of_gamelog_col_nums = [col_num for col_num in range(len(column_names)) if stats[len(stats)-1] in column_names[col_num]]

# Creates list of columns that contain non-gamelog data --> starts with first column after game_log columns to the end of all columns
col_list = list(range(np.max(end_of_gamelog_col_nums)+1,len(years_as_rows.columns)))
col_list.append(0)
col_list.append(1)
col_list.sort()

years_as_rows_season_stats_only = years_as_rows.ix[:,col_list]

# Free up memory
del years_as_rows

# Sorts the dataframe by player then season
years_as_rows_season_stats_only = years_as_rows_season_stats_only.sort_values(['Player','season'], ascending=True)

###########################################################################################

# Creates list of player names
players = list(years_as_rows_season_stats_only.Player.unique())

copy_of_years_as_rows_season_stats_only = years_as_rows_season_stats_only.copy()

# Creates list of all years in data set
all_years = [1997,1998,1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015]

############################################################################################

### Loop to create rows for each missing player/year combo

for player in players:
    print(player)
    #print(years_as_rows.ix[years_as_rows.Player == player,'season'].unique())
    year_list = years_as_rows_season_stats_only.ix[years_as_rows_season_stats_only.Player == player,'season'].unique()
    missing_years = list(set(all_years)-set(year_list))
    for year in missing_years:
        years_as_rows_season_stats_only.ix[len(years_as_rows_season_stats_only)+1,0:2]=[year, player]

# Sorts the dataframe by player then season
years_as_rows_season_stats_only = years_as_rows_season_stats_only.sort_values(['Player','season'], ascending=True)

# After writing the dataframe to csv, go into excel and delete two empty rows left over from multi-index and save as data_for_lstm_prior_no_multi_index.csv
years_as_rows_season_stats_only.to_csv('/Users/Miller/Documents/NBA 2016-17/RNN Prior Modeling Data/season_data_only_lstm_prior.csv')
