import pandas as pd
import numpy as np
import datetime
from sklearn import preprocessing
from scipy.stats import boxcox
from scipy import stats

# every_game = pd.read_csv("/Users/Miller/Documents/NBA 2016-17/RNN Daily Prediction Set/1.this_and_all_szns_with_career_and_current_szn_stats.csv")

# # Drops unnamed columns if they exist
# if np.sum(every_game.columns.str.contains('Unnamed')) > 0:
#     unnamed_cols = [col for col in every_game.columns if 'Unnamed' in col]
#     unnamed_cols.extend(['Line','Location', 'Location_0', 'Opponent', 'Team', 'Total', 'count', 'location_@'])
#     every_game.drop(unnamed_cols, axis=1, inplace=True)

every_game = pd.read_csv("/Users/Miller/Documents/NBA 2016-17/RNN Daily Prediction Set/1.this_and_all_szns_with_career_and_current_szn_stats_cols_removed.csv")
if np.sum(every_game.columns.str.contains('Unnamed')) > 0:
    unnamed_cols = [col for col in every_game.columns if 'Unnamed' in col]
    every_game.drop(unnamed_cols, axis=1, inplace=True)

every_game.sort_values('Date', inplace=True)

### Need to filter data set by data before removing date column ###  

## Need to fix dates from 2016-2017 (2017-xx-xx) --> xx-xx-2017

every_game['date_new'] = every_game.Date

# Fix date formatting
for row in range(len(every_game)):
    if row % 10000 == 0:
        print(row)
    if (str(every_game.ix[row,'Date'])[:4]=='2016'):
        if str(every_game.ix[row,'Date'])[8]=='0':
            every_game.ix[row,'date_new']=str(every_game.ix[row,'Date'])[5:7]+"/0"+str(every_game.ix[row,'Date'])[9]+"/"+str(every_game.ix[row,'Date'])[0:4]
        else:
            every_game.ix[row,'date_new']=str(every_game.ix[row,'Date'])[5:7]+"/"+str(every_game.ix[row,'Date'])[8:10]+"/"+str(every_game.ix[row,'Date'])[0:4]
    if (str(every_game.ix[row,'Date'])[:4]=='2017'):
        every_game.ix[row,'date_new']=str(every_game.ix[row,'Date'])[6]+"/"+str(every_game.ix[row,'Date'])[8:]+"/"+str(every_game.ix[row,'Date'])[0:4]
        
every_game.head()        
        
every_game.sort_values('date_new', inplace=True)

date_obj = pd.to_datetime(every_game.date_new)

# Calculates vector of "season" column as datetime object
season_vector = pd.to_datetime('1995', yearfirst=True, format="%Y")

# Creates vector of datetime objects containing days since 1995 
date_in_days = (date_obj - season_vector) 

# Creates list of days since 1995 without datetime formatting
formatted_age_list = [str(date)[:5] if len(str(date))==19 else str(date)[:4] for date in date_in_days]

every_game['date_in_days']=formatted_age_list

every_game.sort_values('date_in_days', inplace=True)

# Create subsets to predict from
games_on_3_10_or_prior = every_game[every_game.date_in_days.astype(int) <= 8104]

games_on_4_8_or_prior = every_game[every_game.date_in_days.astype(int) <= 8133]

games_on_4_11_or_prior = every_game[every_game.date_in_days.astype(int) <= 8136]

################################

games_on_3_10_or_prior.to_csv("/Users/Miller/Documents/NBA 2016-17/RNN Daily Prediction Set/3_10_pred_set.csv")
games_on_4_8_or_prior.to_csv("/Users/Miller/Documents/NBA 2016-17/RNN Daily Prediction Set/4_8_pred_set.csv")
games_on_4_11_or_prior.to_csv("/Users/Miller/Documents/NBA 2016-17/RNN Daily Prediction Set/4_11_pred_set.csv")

df_list = [games_on_3_10_or_prior,games_on_4_8_or_prior,games_on_4_11_or_prior]

count_dict = {0:'3-10', 1:'4-8', 2:'4-11'}

count = 0

for every_game in df_list:

    #Sorts by player name then age
    every_game.sort_values(['Player','Age'],inplace=True)
    
    # Rather than removing, his position is being changed
    every_game.ix[every_game['Player']=='Briante Weber','Pos'] = 'G'
    every_game.ix[every_game['Player']=='David Nwaba','Pos'] = 'G'
    
    ########################################################
    
    # Masks out players with normal bday notation
    normal_bdays = every_game[every_game.Age.str.len() == 6]
    
    # Masks out players with abnormal bday notation (e.g. 26 rather than 26-xxx)
    abnormal_bdays = every_game[every_game.Age.str.len() != 6]
    
    abnormal_bdays.reset_index(inplace=True)
    
    for row in range(len(abnormal_bdays)):
        abnormal_bdays.ix[row, 'Age'] = str(abnormal_bdays.ix[row, 'Age']) + "-000"
    
    # Re-appends subsets of the original data set
    every_game = normal_bdays.append(abnormal_bdays)
    
    # Creates new age column
    every_game['age_in_days'] = every_game['Age'].map(lambda x: int(str(x[0:2]))*365+int(str(x[3:])))
    
    every_game.reset_index(inplace=True)
    
    #Sorts by player name then age
    every_game.sort_values(['Player','Age'],inplace=True)
    
    ###############################################
    
    # Creates a one hot for when a player is traded
    every_game['new_team'] = 0
    every_game['new_szn'] = 0
    for row in range(1,len(every_game)):
        if row % 10000 == 0:
            print(row)
        if (every_game.ix[row, 'Tm'] != every_game.ix[row-1, 'Tm']) & (every_game.ix[row, 'season'] == every_game.ix[row-1, 'season']) & (every_game.ix[row, 'Player'] == every_game.ix[row-1, 'Player']):
            every_game.ix[row,'new_team']=1
        if every_game.ix[row, 'season'] != every_game.ix[row-1,'season']:
            every_game.ix[row, 'new_szn']=1
            
    # Removes unwanted columns
    
    cols_to_remove = ['Open Line', 'Open Total', 'avg_line', 'date_formatted', 'Date', 'Age', 'Tm', 'team_formatted', 'index', 'Opp', 'level_0', "Game Number"]
    
    next_szn_cols = [col for col in every_game.columns if "next_szn" in col]
    
    cols_to_remove.extend(next_szn_cols)
    
    every_game.drop(cols_to_remove, axis=1, inplace=True)
    
    ###########################
        
    #Sorts by player name then age
    every_game.sort_values(['Player','age_in_days'],inplace=True)
    
    # Creates one-hots for position and result
    every_game = pd.get_dummies(every_game,columns=['Pos','Result'])
    
    # Fills na fields
    every_game.fillna(inplace=True, value=0.0)
    
    # Scales and centers all variables except for fd_pts and dk_pts (targets)
    cols_to_preprocess = [col for col in every_game.columns if ('Player' not in col) & (col != 'dk_pts') & (col != 'fd_pts') & (col != 'date_in_days') & (col != 'date_new')]
    
    every_game[cols_to_preprocess] = preprocessing.scale(every_game[cols_to_preprocess])
    
    every_game.to_csv('/Users/Miller/Documents/NBA 2016-17/RNN Daily Prediction Set/{0}_ready_for_training_and_prediction.csv'.format(count_dict[count]))

    count += 1







