import pandas as pd
import numpy as np
from sklearn.metrics import mean_squared_error
import math

preds_4_8 = pd.read_csv("/Users/Miller/Documents/NBA 2016-17/Daily Modeling Data/Daily Predictions/daily_predictions_4_8.csv", usecols=['Player',"xgb_pred_('FD_POINTS', 78.0)",'season'])

fp_proj_4_8 = pd.read_csv("/Users/Miller/Documents/NBA 2016-17/DFS/fantasy_pros_proj/fp_proj_4_8.csv")

fd_4_8 = pd.read_csv("/Users/Miller/Documents/NBA 2016-17/DFS/fd salaries/fd_salaries_4_8.csv")

# Create fd proj for fantasypros
fp_proj_4_8['fd_proj']=fp_proj_4_8['PTS']+1.2*fp_proj_4_8['REB']+1.5*fp_proj_4_8['AST']+2*fp_proj_4_8['BLK']+2*fp_proj_4_8['STL']-fp_proj_4_8['TO']

# Drops unwanted columns
cols_to_drop = [col for col in fp_proj_4_8.columns if (col != 'Player') & (col != 'fd_proj')]
fp_proj_4_8.drop(cols_to_drop, axis=1, inplace=True)

### Needs to be an outer merge ###
# Merges final_pred_set with vegas data and only keeps players who have a match in the vegas data
fp_and_xgb_preds_4_8 = pd.merge(preds_4_8[preds_4_8.season==2016],fp_proj_4_8, left_on='Player',right_on='Player', how='outer')

# Function to convert results df to dataframe with scores and names
def create_lstm_df(lstm_preds,label,list_num):
    split_names = lstm_preds['player_names_{0}'.format(list_num)].strip("'").split(",")
    clean_names = [name.strip(" ").strip("'").strip('[').strip('"').strip(']') for name in split_names]
    split_preds = lstm_preds['pred_list_{0}'.format(list_num)].split(",")
    clean_preds = [float(name.strip(" ").strip("'").strip('[').strip('"').strip(']')) for name in split_preds]
    lstm_names_preds_df = pd.DataFrame(columns=['Name','lstm_pred_fd_pts_{0}'.format(str(label))])
    lstm_names_preds_df['Name'] = np.array(clean_names)
    lstm_names_preds_df['lstm_pred_fd_pts_{0}'.format(str(label))] = np.array(clean_preds)
    return(lstm_names_preds_df)
    
lstm_preds_new = pd.read_csv("/Users/Miller/Desktop/final_prediction_results.csv")

# 3 epochs
lstm_train = lstm_preds_new.iloc[5,:]

train = create_lstm_df(lstm_train,'3_epochs',1)

# # 4 epochs
# lstm_pred = lstm_preds_new.iloc[5,:]
    
# pred = create_lstm_df(lstm_pred,'4_epochs',2)


# # Merging different types of lstm predictions
# lstm_predictions = pd.merge(train, pred, on='Name', how='inner')

lstm_predictions = train

all_preds = pd.merge(lstm_predictions, fp_and_xgb_preds_4_8, left_on='Name', right_on='Player', how='right')

# all_preds.to_csv("/Users/Miller/Desktop/4_8_errors.csv")

# Read in results
ground_truth = pd.read_csv('/Users/Miller/Documents/NBA 2016-17/Python Scripts/12.Daily RNN Model Fitting/4-8_ready_for_training_and_prediction.csv')

gt_fd_pts = ground_truth.ix[ground_truth.date_new == '4/08/2017',['Player','fd_pts']]

#################

# Merge predictions with actual results
final_beaut = pd.merge(all_preds,gt_fd_pts,left_on='Name',right_on='Player',how='left')

# final_beaut.to_csv("/Users/Miller/Desktop/4_8_fuckups.csv")


# Drop unwanted columns
final_beaut.drop(['season','Player_y','Player_x'],axis=1,inplace=True)

# Drop rows where Name is missing
final_beaut = final_beaut[~final_beaut.Name.isnull()]

final_beaut = final_beaut.fillna(value=0)

relevant_players_df = final_beaut

#########################################################

## Use to remove players not projected > 15 by any model
# fifteen_plus = np.where((final_beaut['fd_proj'] > 15) | (final_beaut["xgb_pred_('FD_POINTS', 64.0)"]>15) | (final_beaut["lstm_pred_fd_pts"]>15), True, False)
# relevant_players_df = relevant_players_df[fifteen_plus]

#############################################################

relevant_players_df.reset_index(inplace=True)

# Use if want to do no player manipulation at all 
rel_players_no_inj = relevant_players_df  

########################################################################################################

# Using updated player list with outer merge
relevant_players_df = pd.read_csv('/Users/Miller/Documents/NBA 2016-17/Final Predictions/preds_4_8_outer_merge.csv')


# Removal of players known to not be playing

# List of players known to be out with injury
players_to_remove = ['Marco Belinelli','Allen Crabbe','Sean Kilpatrick','Luke Babbitt','Amir Johnson','Derrick Favors','Terrence Jones','Otto Porter','Michael Beasley','Kevin Durant','James Young','John Henson','Anthony Davis','Stephen Curry','DeMarcus Cousins','Jusuf Nurkic','Robert Covington','Dion Waiters','Malcolm Brogdon','Jahlil Okafor','Sergio Rodriguez','Austin Rivers','Ed Davis',"E'Twaun Moore", 'Jarrett Jack','Dejounte Murray','Festus Ezeli']

# players_fp_missed = ['Kevin Durant','Derrick Favors']

# Danny Green, Luke Babbitt, Otto Porter, Sean Kilpatrick, Amir Johnson, 'Allen Crabbe', 'Marco Belinelli'

# Create list of indices of players who were known to be injured to remove
indices_to_remove = []
for row in range(len(relevant_players_df)):
    if relevant_players_df.ix[row, 'Name'] in players_to_remove:
        indices_to_remove.append(False)
    else:
        indices_to_remove.append(True)
        
rel_players_no_inj = relevant_players_df[np.array(indices_to_remove)]

# Use when importing updated player list
lineup_opt = rel_players_no_inj

########################################################################################################3

lineup_opt = pd.merge(rel_players_no_inj, fd_4_8[['Nickname','Salary','Position','Injury Indicator']], left_on='Name',right_on='Nickname',how='left')

lineup_opt.reset_index(inplace=True)

lineup_opt.drop('index',axis=1,inplace=True)

# Removes players who were not available on FanDuel
legit_relevant = lineup_opt[~lineup_opt.Salary.isnull()]

# Remove players designated as out in FanDuel salary list
legit_relevant = legit_relevant[legit_relevant['Injury Indicator']!='O']


# Testing RMSE

math.sqrt(mean_squared_error(legit_relevant["xgb_pred_('FD_POINTS', 78.0)"],legit_relevant.fd_pts))

math.sqrt(mean_squared_error(legit_relevant.fd_proj, legit_relevant.fd_pts))

math.sqrt(mean_squared_error(legit_relevant.lstm_pred_fd_pts_3_epochs, legit_relevant.fd_pts))



# Name xgb_pred_..FD_POINTS...78.0. fd_pos Salary
# 7     Blake Griffin                     37.44958     PF   9200
# 8  Bojan Bogdanovic                     18.86742     SF   3500
# 14    C.J. McCollum                     33.30829     SG   7000
# 19   Damian Lillard                     37.98957     PG   9100
# 37   Gordon Hayward                     33.12464     SF   7800
# 42      J.J. Redick                     25.25809     SG   4800
# 76      Noah Vonleh                     18.62274     PF   3600
# 90      Rudy Gobert                     41.24870      C   9100
# 98   T.J. McConnell                     27.37108     PG   5700

xgb = ['Blake Griffin','Bojan Bogdanovic','C.J. McCollum','Damian Lillard','Gordon Hayward','J.J. Redick','Noah Vonleh','Rudy Gobert','T.J. McConnell']

xgb_df=pd.DataFrame(np.array(xgb))

xgb_actuals = pd.merge(xgb_df, lineup_opt, left_on=0, right_on='Name',how='left')

np.sum(xgb_actuals[['Name','fd_pts']])

xgb_actuals[['Name','fd_pts']]

#####################################################################

# Name lstm_pred_fd_pts_3_epochs fd_pos Salary
# 14          C.J. McCollum                  33.32112     SG   7000
# 35  Giannis Antetokounmpo                  45.33667     SG  10000
# 37         Gordon Hayward                  35.02317     SF   7800
# 46          James Johnson                  32.93773     PF   6400
# 48            Jason Smith                  19.37542     PF   4000
# 55              John Wall                  44.65737     PG  10300
# 63        Khris Middleton                  29.88052     SF   5900
# 68          Marcin Gortat                  24.90389      C   4700
# 104           Tony Parker                  20.13707     PG   3900
# > 

lstm = ['C.J. McCollum','Giannis Antetokounmpo','Gordon Hayward','James Johnson','Jason Smith','John Wall','Khris Middleton','Marcin Gortat','Tony Parker']

lstm_df=pd.DataFrame(np.array(lstm))

lstm_actuals = pd.merge(lstm_df, lineup_opt, left_on=0, right_on='Name',how='left')

np.sum(lstm_actuals[['Name','fd_pts']])

lstm_actuals[['Name','fd_pts']]


### LSTM 4 epochs ####

#      Name lstm_pred_fd_pts_4_epochs fd_pos Salary
# 19         Damian Lillard                  40.13181     PG   9100
# 32         Draymond Green                  34.53936     PF   7100
# 35  Giannis Antetokounmpo                  44.14671     SG  10000
# 37         Gordon Hayward                  37.10221     SF   7800
# 46          James Johnson                  32.64358     PF   6400
# 58        Josh Richardson                  24.16154     SG   4900
# 63        Khris Middleton                  30.22642     SF   5900
# 68          Marcin Gortat                  28.62702      C   4700
# 104           Tony Parker                  19.08104     PG   3900
# > 

lstm = ['Damian Lillard','Draymond Green','Giannis Antetokounmpo','Gordon Hayward','James Johnson','Josh Richardson','Khris Middleton','Marcin Gortat','Tony Parker']

lstm_df=pd.DataFrame(np.array(lstm))

lstm_pred_no_train = pd.merge(lstm_df, lineup_opt, left_on=0, right_on='Name',how='left')

np.sum(lstm_pred_no_train[['Name','fd_pts']])

lstm_pred_no_train[['Name','fd_pts']]


# Name fd_proj fd_pos Salary
# 34         Draymond Green    39.8     PF   7100
# 37  Giannis Antetokounmpo    52.0     SG  10000
# 57              John Wall    44.8     PG  10300
# 62        Justin Anderson    24.2     SF   4200
# 63          Kawhi Leonard    45.4     SF   9200
# 80           Nik Stauskas    21.1     SG   3800
# 93         Richaun Holmes    29.4     PF   6100
# 99             Shawn Long    22.7      C   3800
# 115         Tyler Johnson    27.3     PG   5500
# > 
# > FDsol$optimum
# [1] 326.1
# > 
# > FDsol$auxiliary$primal
# [1]     2     2     2     2     1 59900

fp = ['Draymond Green','Giannis Antetokounmpo','John Wall','Justin Anderson','Kawhi Leonard','Nik Stauskas','Richaun Holmes','Shawn Long','Tyler Johnson']

fp_df=pd.DataFrame(np.array(fp))

fp_actuals = pd.merge(fp_df, lineup_opt, left_on=0, right_on='Name',how='left')

np.sum(fp_actuals[['Name','fd_pts']])

fp_actuals[['Name','fd_pts']]



