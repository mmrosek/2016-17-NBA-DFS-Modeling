from urllib.request import urlopen
from bs4 import BeautifulSoup
import pandas as pd
import re

# Scrapes first page of player log

# Access web page
html_content = urlopen("http://www.basketball-reference.com/players/a/")

# Create html object
soup = BeautifulSoup(html_content, "lxml")

# Accessing the row of the html object that contains the column heading names
column_heading_row = soup.find_all("tr")[0]

# Returns the tags (?)
th_tags = column_heading_row.find_all("th")

# Creates a list containing the column names
col_names=[]
for th in th_tags:
    col_names.append(th.get_text())

# Returns the first table in html_content
table = soup.find_all("table")[0]

# Returns the 2nd (could be any) row in the table
any_row = table.find_all("tr")[1]

# Returns number of columns in table
num_of_columns = len(any_row.find_all('td'))

# Initializes new dataframe
new_df = pd.DataFrame(columns=range(num_of_columns+1), index=[0])

# Parses through table and puts stats into dataframe going across each row
row_marker = 0
for row in table.find_all('tr'):
    column_marker = 0
    columns = row.find_all('td')
    player_name = row.find_all('th')
    new_df.ix[row_marker,column_marker] = player_name[0].get_text()
    column_marker += 1
    for column in columns:
        new_df.ix[row_marker,column_marker] = column.get_text()
        column_marker += 1
        if column_marker == (num_of_columns+1):
            row_marker += 1

# Assigns correct column names
new_df.columns=col_names

alphabet = ['b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','y','z']

for letter in alphabet:
    
    # Access web page
    html_content = urlopen("http://www.basketball-reference.com/players/{}/".format(letter))

    # Create html object
    soup = BeautifulSoup(html_content, "lxml")
    
    # Returns the first table in html_content
    table = soup.find_all("table")[0]
    
    # Parses through table and puts stats into dataframe going across each row
    row_marker = len(new_df)+1
    for row in table.find_all('tr'):
        column_marker = 0
        columns = row.find_all('td')
        player_name = row.find_all('th')
        new_df.ix[row_marker,column_marker] = player_name[0].get_text()
        column_marker += 1
        for column in columns:
            new_df.ix[row_marker,column_marker] = column.get_text()
            column_marker += 1
            if column_marker == (num_of_columns+1):
                row_marker += 1
                
    print(letter)
    
#######################################################################

### Masking to find players with duplicate names who played in 1998+

# Mask to remove anyone who didn't play in 1998+

year_mask = new_df.To.astype(int) > 1996

played_in_98 = new_df[year_mask]

# Mask to only keep players with duplicate names in 1998+ data set

duplicate_mask=(played_in_98.duplicated("Player")) 

duplicates = played_in_98[duplicate_mask]

##########################################################################################

# Creates list of row numbers of all duplicate players regardless of when they played

# Also removes trailing asterisk for HOF players

# Not sure why but row 151 is corrupted

duplicate_names = duplicates.Player.unique()

row_numbers_of_duplicates = []
for row in range(len(new_df)):
    if row == 151:
        continue
    if str(new_df.ix[row,"Player"])[-1] == "*":
        new_df.ix[row,"Player"] = str(new_df.ix[row,"Player"])[:-1]
    if str(new_df.ix[row,"Player"]) in duplicate_names:
        row_numbers_of_duplicates.append(row)
    
# Writes dataframe to CSV

new_df.to_csv("/Users/Miller/Documents/NBA 2016-17/every_player_to_play_in_nba.csv")

#############################################################################

# Displays list of players with dulicate names that should match players being edited below

new_df.ix[row_numbers_of_duplicates,:]

##############################################################################

# Reads in list of all players to play in NBA
players_full = pd.read_csv("/Users/Miller/Documents/NBA 2016-17/every_player_to_play_in_nba.csv")

##############################################################################

# Creating list of players who started career prior to beginning of "wide" data set (1998-1999 season)

#too_old_mask = (players_full.From < 1999) 

#players_full = players_full[~too_old_mask]

### Edit names of players in list of all players in nba history to mirror changes in "wide"

# Returns list of players in "wide" not in "players_full" == players we edited

#set(wide.Player) - set(players_full.Player)

# Marcus Williams

players_full.ix[(players_full.Player == "Marcus Williams") & (players_full.College == 'University of Arizona'),"Player"] = "Marcus Elliott Williams"

# Chris Wright

players_full.ix[(players_full.Player == "Chris Wright") & (players_full.College == 'Georgetown University'),"Player"] = "Chris Georgetown Wright"

# Chris Johnson

players_full.ix[(players_full.Player == "Chris Johnson") & (players_full.College == "Louisiana State University"), "Player"] = "Chris LSU Johnson"

# Dee Brown

players_full.ix[(players_full.Player == "Dee Brown") & (players_full.College == "University of Illinois at Urbana-Champaign"), "Player"] = "Dee Daniel Brown"

# Glen Rice Jr.

players_full.ix[(players_full.Player == "Glen Rice") & (players_full.College == "Georgia Institute of Technology"), "Player"] = "Glen Rice Jr."

# Glenn Robinson

players_full.ix[(players_full.Player == "Glenn Robinson") & (players_full.College == "Purdue University"), "Player"] = "Glenn Robinson Jr."

# Tim Hardaway Sr.

players_full.ix[(players_full.Player == "Tim Hardaway") & (players_full.College == "University of Texas at El Paso"), "Player"] = "Tim Hardaway Sr."

# Tony Mitchell

players_full.ix[(players_full.Player == "Tony Mitchell") & (players_full.College == "University of North Texas"), "Player"] = "Tony Anthony Mitchell"

###########################

players_full.to_csv("/Users/Miller/Desktop/nodups.csv")

len(players_full)


